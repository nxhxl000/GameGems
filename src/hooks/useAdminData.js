import { useState, useEffect } from "react";
import { ethers } from "ethers";
import axios from "axios";
import { BACKEND_URL } from "../contexts/Web3Provider";

export default function useAdminData(contract, isActive, currentAccount) {
  const [totalSupply, setTotalSupply] = useState(0);
  const [availableForSale, setAvailableForSale] = useState(0);
  const [accounts, setAccounts] = useState([]);
  const [ethBalance, setEthBalance] = useState(0);
  const [adminAddress, setAdminAddress] = useState("");
  const [isAdmin, setIsAdmin] = useState(false);
  const [isAdminReady, setIsAdminReady] = useState(false);

  const refreshAdminData = async () => {
    console.log("üîÅ refreshAdminData –≤—ã–∑–≤–∞–Ω");
    if (!contract || !contract.runner?.provider) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–ª–∏ provider");
      return;
    }

    try {
      console.log("üì° –ü–æ–ª—É—á–∞–µ–º totalSupply –∏ admin...");
      const [supplyRaw, adminAddr, availableRaw] = await Promise.all([
        contract.totalSupply(),
        contract.admin(),
        contract.availableForSale(), // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ
      ]);

      console.log("‚úÖ admin =", adminAddr, " currentAccount =", currentAccount);

      setAdminAddress(adminAddr);
      const isRealAdmin = currentAccount?.toLowerCase() === adminAddr.toLowerCase();
      setIsAdmin(isRealAdmin);
      setIsAdminReady(true);
      if (!isRealAdmin) {
        console.warn("üö´ –ù–µ –∞–¥–º–∏–Ω ‚Äî –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏");
        return;
      }

      setTotalSupply(Number(supplyRaw));
      setAvailableForSale(Number(availableRaw));
      console.log("üì¶ totalSupply:", Number(supplyRaw));
      console.log("üõí AvailableForSale:", Number(availableRaw));

      // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ backend (–∞ –Ω–µ –∏–∑ localStorage)
      const res = await axios.get(`${BACKEND_URL}/profiles`);
      const profiles = res.data || [];
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ S3`);

      // üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ GEM
      const balances = await Promise.all(
        profiles.map(async (profile) => {
          const bal = await contract.balanceOf(profile.address);
          return {
            ...profile,
            balance: Number(bal),
          };
        })
      );

      setAccounts(balances);

      // üí∏ ETH –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
      const provider = contract.runner.provider;
      const ethBal = await provider.getBalance(contract.target || contract.address);
      const formatted = Number(ethers.formatEther(ethBal)).toExponential(8);
      setEthBalance(formatted);

      console.log("üí∏ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (ETH):", formatted);
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ refreshAdminData:", e);
      setIsAdminReady(true);
    }
  };

  const exportAccounts = () => {
    console.log("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ CSV");
    const csv = ["–ò–º—è,–ê–¥—Ä–µ—Å,–ë–∞–ª–∞–Ω—Å GEM"];
    accounts.forEach((acc) => {
      csv.push(`${acc.nickname || ""},${acc.address},${acc.balance}`);
    });
    const blob = new Blob([csv.join("\n")], { type: "text/csv" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "accounts.csv";
    a.click();
  };

  const withdrawEth = async () => {
    if (!contract) return;
    try {
      const tx = await contract.withdrawEth();
      await tx.wait();
      await refreshAdminData();
      alert("‚úÖ ETH –≤—ã–≤–µ–¥–µ–Ω—ã");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ ETH:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ ETH");
    }
  };

  const dropTokens = async (amount) => {
    if (!contract) return;
    try {
      const tx = await contract.dropTokens(BigInt(amount));
      await tx.wait();
      await refreshAdminData();
      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount} GEM`);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥—Ä–æ–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥—Ä–æ–ø–Ω—É—Ç—å —Ç–æ–∫–µ–Ω—ã");
    }
  };

  useEffect(() => {
    console.log("üöÄ useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:", { isActive, currentAccount, contract });
    if (!isActive || !currentAccount) {
      console.warn("‚õî useEffect –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω");
      return;
    }

    refreshAdminData();
    const interval = setInterval(refreshAdminData, 10000);
    return () => clearInterval(interval);
  }, [contract, isActive, currentAccount]);

  return {
    totalSupply: isAdmin ? totalSupply : 0,
    availableForSale: isAdmin ? availableForSale : 0, // ‚Üê –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    accounts: isAdmin ? accounts : [],
    ethBalance: isAdmin ? ethBalance : 0,
    adminAddress,
    isAdmin,
    isAdminReady,
    refreshAdminData,
    exportAccounts,
    withdrawEth,
    dropTokens,
  };
}
