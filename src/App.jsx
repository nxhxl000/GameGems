import { useState } from "react";
import { useWeb3 } from "./contexts/Web3Provider";
import useAdminData from "./hooks/useAdminData";
import AdminPage from "./components/AdminPage";
import AccountModal from "./components/AccountModal";
import AccountPage from "./components/AccountPage";
import GameScreen from "./components/GameScreen";
import MarketplacePage from "./components/MarketplacePage";
import "./styles/App.css";

function App() {
  const {
    account,
    username,
    setUsername,
    gems,
    gemContract,
    view,
    setView,
    showModal,
    setShowModal,
    handleCreate,
    handleLogin,
    handleAdminLogin,
    buyGems,
    gemPrice,
    sendLocalGemsToContract,
    resetAppState,
  } = useWeb3();

const {
  totalSupply,
  availableForSale,
  accounts,
  ethBalance,
  adminAddress,
  refreshAdminData,
  exportAccounts,
  withdrawEth,
  dropTokens,
  isAdmin,
  isAdminReady, // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  } = useAdminData(gemContract, view === "admin", account);

  const [gemCount, setGemCount] = useState("");
  const { localGems, setLocalGems } = useWeb3();

  const handleBuyGems = async () => {
    const count = parseInt(gemCount);
    if (isNaN(count) || count <= 0) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GEM");
      return;
    }
    await buyGems(count);
    setGemCount("");
  };

  const handleSendLocalGems = async (amount) => {
    const success = await sendLocalGemsToContract(amount);
    if (success) {
      setLocalGems((prev) => prev - amount);
    }
  };

  const handleAdminDrop = async (amount) => {
    try {
      if (!gemContract) return alert("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
      const tx = await gemContract.adminDrop(amount);
      await tx.wait();
      alert(`–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${amount} GEM –≤ –ø—É–ª.`);
      refreshAdminData();
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ adminDrop:", err);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å adminDrop. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
    }
  };



  return (
    <div className="container">
      {view === "home" && (
        <>
          <h1>üíé GameGems</h1>
          <button className="login" onClick={handleLogin}>–í–æ–π—Ç–∏</button>
          <button className="create" onClick={() => setShowModal(true)}>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
          <button
            className="admin"
            onClick={() => {
              console.log("üîê –ö–Ω–æ–ø–∫–∞ '–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω' –Ω–∞–∂–∞—Ç–∞");
              handleAdminLogin();
            }}
            disabled={isAdminReady && !isAdmin}
          >
            –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω
          </button>
        </>
      )}

      {view === "admin" && (
        !isAdminReady ? (
          <div style={{ padding: "2rem", textAlign: "center" }}>
            <h2>üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</h2>
          </div>
        ) : isAdmin ? (
          <AdminPage
            totalSupply={totalSupply}
            availableForSale={availableForSale}
            accounts={accounts}
            ethBalance={ethBalance}
            adminAddress={adminAddress}
            onBack={resetAppState}
            onRefresh={refreshAdminData}
            onExport={exportAccounts}
            onWithdraw={withdrawEth}
            onAdminDrop={handleAdminDrop}
          />
        ) : (
          <div style={{ padding: "2rem", textAlign: "center" }}>
            <h2>üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>
            <button onClick={resetAppState}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>
          </div>
        )
      )}

      {view === "game" && (
        <GameScreen
          username={username}
          onAccountPage={() => setView("account")}
          onBack={resetAppState}
          localGems={localGems}
          setLocalGems={setLocalGems}
          onMarketplace={() => setView("marketplace")}
        />
      )}

      {view === "account" && (
        <AccountPage
          account={account}
          username={username}
          gems={gems}
          localGems={localGems}
          gemCount={gemCount}
          setGemCount={setGemCount}
          onBuyGems={handleBuyGems}
          onSendLocalGems={handleSendLocalGems}
          gemPrice={gemPrice}
          onBack={() => setView("game")}
        />
      )}

      {view === "marketplace" && (
        <MarketplacePage onBack={() => setView("game")} />
      )}

      {showModal && (
        <AccountModal
          username={username}
          setUsername={setUsername}
          onCancel={() => setShowModal(false)}
          onConfirm={handleCreate}
        />
      )}
      
    </div>
  );
}

export default App;
