// src/components/MarketplacePage.jsx
import React, { useEffect, useState } from "react";
import { useWeb3 } from "../contexts/Web3Provider";
import axios from "axios";
import "../styles/MarketplacePage.css";

const rarityMap = {
  1: "–û–±—ã—á–Ω—ã–π",
  2: "–†–µ–¥–∫–∏–π",
  3: "–≠–ø–∏—á–µ—Å–∫–∏–π",
  4: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
};

const mapBonusAttribute = (attr) => {
  switch (attr) {
    case "flatPowerBonus":
      return "—Å–∏–ª–∞ –∫–ª–∏–∫–∞";
    case "dropChanceBonus":
      return "—à–∞–Ω—Å –¥—Ä–æ–ø–∞";
    case "vestLuckBoost":
      return "—É–¥–∞—á–∞";
    case "gemMultiplier":
      return "–º–Ω–æ–∂–∏—Ç–µ–ª—å GEM";
      case "rarityModBonus":
      return "—à–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏";
      
    default:
      return attr;
  }
};

const MarketplacePage = ({ onBack }) => {
  const { marketplaceContract, nftContract, account, backendUrl, gemContract } = useWeb3();
  const [listings, setListings] = useState([]);
  const [myNFTs, setMyNFTs] = useState([]);

  const fetchListings = async () => {
  try {
  
    const totalSupply = await nftContract.totalSupply();

    const items = [];

    for (let i = 1; i <= Number(totalSupply); i++) {
  

      const listing = await marketplaceContract.getListing(i);
      const priceInGems = Number(listing.priceInGems);

      if (listing && priceInGems > 0) {
        

        const tokenURI = await nftContract.tokenURI(i);
        const owner = await nftContract.ownerOf(i);

        let metadata = {};

        try {
          const response = await axios.get(`${backendUrl}/metadata-proxy/`, {
            params: { url: tokenURI }
          });

          metadata = typeof response.data === 'string'
            ? JSON.parse(response.data)
            : response.data;

          
        } catch (err) {
        
          continue;
        }

        const itemType = metadata.itemType || 'Unknown';
        const rarityIndex = metadata.rarity || 1;
        const bonusValue = metadata.bonus?.value || 0;

        const rarityMap = {
          1: "Common",
          2: "Rare",
          3: "Epic",
          4: "Legendary"
        };
        const rarity = rarityMap[rarityIndex] || "Common";

        // üì§ –ó–∞–ø—Ä–æ—Å –∫ ML –º–æ–¥–µ–ª–∏ —Å —Ü–µ–Ω–æ–π
        console.log(`üì§ ML –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${i}:`, {
          itemType,
          rarity,
          bonusValue,
          price: priceInGems
        });

        let recommendedPrice = null;
        let priceStatus = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        let deviationPercent = null;

        try {
          const mlRes = await axios.post(`${backendUrl}/predict-price`, {
            itemType,
            rarity,
            bonusValue,
            price: priceInGems
          });

          recommendedPrice = mlRes.data.recommended_price;

          const labelMap = {
            –∑–∞–Ω–∏–∂–µ–Ω–∞: "—Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞",
            –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è: "—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞",
            –∑–∞–≤—ã—à–µ–Ω–∞: "—Ü–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–∫–∞"
          };

          priceStatus = labelMap[mlRes.data.price_status] || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
          deviationPercent = mlRes.data.deviation_percent;
        } catch (err) {}

        items.push({
          tokenId: i,
          price: priceInGems,
          owner,
          itemType,
          rarity: rarityIndex,
          bonus: metadata.bonus || {},
          image: metadata.image || '',
          recommendedPrice,
          priceStatus,
          deviationPercent
        });
      }
    }

    
    setListings(items);

  } catch (error) {}
};


  const fetchUserNFTs = async () => {
    if (!account) {  
      return;
    }

    try {
      // –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö NFT –∏–∑ backend –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É
      const url = `${backendUrl}/nft`;
      
      const response = await axios.get(url);

      const allNFTs = Array.isArray(response.data) ? response.data : [];
      const parsedNFTs = allNFTs.map(x => (typeof x === "string" ? JSON.parse(x) : x));

      

      const userNFTs = [];
      let checkCount = 0;

      for (const item of parsedNFTs) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç
          const owner = await nftContract.ownerOf(item.tokenId);
          checkCount++;

          if (owner.toLowerCase() === account.toLowerCase()) {
            

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            const listing = await marketplaceContract.getListing(item.tokenId);
            const price = Number(listing.priceInGems);

            if (price > 0) {} else {userNFTs.push(item)}
          } else {continue;}
        } catch (err) {
          userNFTs.push(item);
        }
      }

      
      setMyNFTs(userNFTs);
    } catch (err) {setMyNFTs([])}
  };



  const handleList = async (tokenId) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º URI –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ NFT
    const tokenURI = await nftContract.tokenURI(tokenId);
    const response = await axios.get(`${backendUrl}/metadata-proxy/`, {
      params: { url: tokenURI }
    });

    const metadata = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;

    const itemType = metadata.itemType;
    const rarityIndex = metadata.rarity;
    const bonusValue = metadata.bonus?.value || 0;

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ –≤ —Å—Ç—Ä–æ–∫—É
    const rarityMap = {
      1: "Common",
      2: "Rare",
      3: "Epic",
      4: "Legendary"
    };
    const rarity = rarityMap[rarityIndex] || "Common";

  

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
    const predictRes = await axios.post(`${backendUrl}/predict-price`, {
      itemType,
      rarity,
      bonusValue
    });

    const recommendedPrice = predictRes.data?.recommended_price;

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const priceStr = prompt(
      `üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞: ${recommendedPrice} GEM\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞:`
    );

    if (!priceStr) return;

    const price = parseInt(priceStr);
    if (isNaN(price) || price <= 0) {
      alert("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞");
      return;
    }

  
    const approved = await nftContract.getApproved(tokenId);
    const marketplaceAddress = marketplaceContract.target;

    const approvedToMarketplace =
      typeof approved === "string" &&
      typeof marketplaceAddress === "string" &&
      approved.toLowerCase() === marketplaceAddress.toLowerCase();

    if (!approvedToMarketplace) {
      const approvalTx = await nftContract.approve(marketplaceAddress, tokenId);
      await approvalTx.wait();
    }

    const tx = await marketplaceContract.listItem(tokenId, price);
    await tx.wait();

    alert("‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!");

    fetchUserNFTs();
    fetchListings();
  } catch (err) {alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ NFT. –°–º. –∫–æ–Ω—Å–æ–ª—å.");}
};


const handleDelist = async (tokenId) => {
  try {
    const tx = await marketplaceContract.delistItem(tokenId);
    await tx.wait();
    alert("‚úÖ NFT —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏!");
    fetchListings();
    fetchUserNFTs();
  } catch (err) {alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∏. –°–º. –∫–æ–Ω—Å–æ–ª—å.");}
};

const handleBuy = async (tokenId, priceInGems, sellerAddress) => {
  console.log(`üõí handleBuy –≤—ã–∑–≤–∞–Ω —Å tokenId=${tokenId}, priceInGems=${priceInGems}, sellerAddress=${sellerAddress}`);

  if (!gemContract) {
    console.log("‚õî –ö–æ–Ω—Ç—Ä–∞–∫—Ç GameGems (gemContract) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    return;
  }
  if (!marketplaceContract) {
    console.log("‚õî –ö–æ–Ω—Ç—Ä–∞–∫—Ç Marketplace –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    return;
  }
  if (!account) {
    console.log("‚õî –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
    return;
  }

  if (priceInGems === undefined || priceInGems === null) {
    console.error("‚ùå –¶–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞—é –ø–æ–∫—É–ø–∫—É");
    return;
  }

  try {
    const marketplaceAddress = marketplaceContract.target;

    const gemsBalance = await gemContract.balanceOf(account);
    console.log(`üíé –ë–∞–ª–∞–Ω—Å GEM: ${gemsBalance.toString()} | –¶–µ–Ω–∞: ${priceInGems}`);

    if (gemsBalance < priceInGems) {
      console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ GEM –¥–ª—è –ø–æ–∫—É–ø–∫–∏");
      return;
    }

    const allowance = await gemContract.allowance(account, marketplaceAddress);
    console.log(`üîç –¢–µ–∫—É—â–∏–π allowance: ${allowance.toString()}`);

    if (allowance < priceInGems) {
      console.log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π approve, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π...`);
      const txApprove = await gemContract.approve(marketplaceAddress, priceInGems);
      await txApprove.wait();
      console.log(`‚úÖ Approve –≤—ã–ø–æ–ª–Ω–µ–Ω`);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π approve —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
    }

    // –ü–æ–∫—É–ø–∫–∞ NFT —á–µ—Ä–µ–∑ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç (–≤–Ω—É—Ç—Ä–∏ buyItem –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç transferForMarketplace —Å –∫–æ–º–∏—Å—Å–∏–µ–π)
    const tx = await marketplaceContract.buyItem(tokenId);
    await tx.wait();
    console.log(`üéâ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ ${tokenId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –∏ NFT
    await fetchListings();
    await fetchUserNFTs();

    console.log(`‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü NFT —Å tokenId=${tokenId} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –æ—Ç—Ä–∞–∂—ë–Ω –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ ${tokenId}:`, error);
  }
};


  useEffect(() => {
    
    fetchListings();
    fetchUserNFTs();
  }, [account]);

  return (
    <div className="marketplace-layout">
      <div className="marketplace-screen">
        <div className="marketplace-header">
          <button onClick={onBack} className="marketplace-back-button">‚¨ÖÔ∏è –ù–∞–∑–∞–¥</button>
          <h2>üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT</h2>
        </div>

        <div className="marketplace-section">
          <h3>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ —Ä—ã–Ω–∫–µ</h3>
          {listings.length === 0 ? (
            <p>–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö NFT.</p>
          ) : (
            <div className="marketplace-grid">
            {listings.map((item) => (
              <div
                key={item.tokenId}
                className={`marketplace-card ${
                  item.priceStatus === "—Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞"
                    ? "card-green"
                    : item.priceStatus === "—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞"
                    ? "card-yellow"
                    : item.priceStatus === "—Ü–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–∫–∞"
                    ? "card-red"
                    : ""
                }`}
              >
                <img src={item.image} alt={`NFT ${item.tokenId}`} className="nft-image" />
                <p><b>ID:</b> {item.tokenId}</p>
                <p><b>–¢–∏–ø:</b> {item.itemType}</p>
                <p><b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {rarityMap[item.rarity]}</p>
                {item.bonus && (
                  <p><b>–ë–æ–Ω—É—Å:</b> {mapBonusAttribute(item.bonus.attribute)} +{item.bonus.value}</p>
                )}
                <p><b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {item.owner.slice(0, 6)}...{item.owner.slice(-4)}</p>
                <p><b>–¶–µ–Ω–∞:</b> {item.price} GEM</p>

                {/* üëâ –û—Ü–µ–Ω–∫–∞ –æ—Ç –º–æ–¥–µ–ª–∏ */}
                {item.priceStatus && (
                    <>
                      <p
                        style={{
                          color:
                            item.priceStatus === '—Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞'
                              ? 'green'
                              : item.priceStatus === '—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞'
                              ? 'goldenrod'
                              : item.priceStatus === '—Ü–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–∫–∞'
                              ? 'red'
                              : 'black',
                          fontWeight: 'bold',
                          margin: '0.25em 0 0',
                        }}
                      >
                        {item.priceStatus === '—Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞' && 'üìâ –¶–µ–Ω–∞ –∑–∞–Ω–∏–∂–µ–Ω–∞'}
                        {item.priceStatus === '—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞' && '‚úÖ –¶–µ–Ω–∞ –≤ –Ω–æ—Ä–º–µ'}
                        {item.priceStatus === '—Ü–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–∫–∞' && 'üìà –¶–µ–Ω–∞ –∑–∞–≤—ã—à–µ–Ω–∞'}
                      </p>
                      {typeof item.recommendedPrice === 'number' && (
                        <p style={{ fontStyle: 'italic', margin: 0 }}>
                          –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ {item.recommendedPrice} GEM
                        </p>
                      )}
                    </>
                  )}
                {item.owner.toLowerCase() === account.toLowerCase() ? (
                  <button onClick={() => handleDelist(item.tokenId)}>–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏</button>
                ) : (
                  <button onClick={() => handleBuy(item.tokenId, item.price, item.owner)}>–ö—É–ø–∏—Ç—å</button>
                )}
                </div>
            ))}
            </div>
          )}
        </div>

        <div className="marketplace-section">
          <h3>üßç –ú–æ–∏ NFT (–Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ)</h3>
          {myNFTs.length === 0 ? (
            <p>–£ –≤–∞—Å –Ω–µ—Ç NFT –≤–Ω–µ –ø—Ä–æ–¥–∞–∂–∏.</p>
          ) : (
            <div className="marketplace-grid">
              {myNFTs.map((item, index) => {
                

                return (
                  <div key={item.tokenId || index} className="marketplace-card">
                    <img src={item.image} alt={`NFT ${item.tokenId}`} className="nft-image" />
                    <p><b>ID:</b> {item.tokenId}</p>
                    <p><b>–¢–∏–ø:</b> {item.itemType}</p>
                    <p><b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {rarityMap[item.rarity]}</p>
                    {item.bonus && (
                      <p><b>–ë–æ–Ω—É—Å:</b> {mapBonusAttribute(item.bonus.attribute)} +{item.bonus.value}</p>
                    )}
                    <button onClick={() => handleList(item.tokenId)}>–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É</button>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MarketplacePage;
