import React, { useState } from "react";
import { useWeb3 } from "../contexts/Web3Provider";
import axios from "axios";
import { Interface } from "ethers";

export default function WrapNFTPanel({ inventory, setInventory, setNftInventory }) {
  const {gemContract, nftContract, account, backendUrl } = useWeb3(); // <- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±–µ—Ä–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const [draggedItem, setDraggedItem] = useState(null);
  const [message, setMessage] = useState("");

  const handleDrop = async (e) => {
  e.preventDefault();
  const item = JSON.parse(e.dataTransfer.getData("item"));

  // üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—ë—Ä—Ç—ã–≤–∞–Ω–∏—è
  if (item.fromNFT) {
  setMessage("‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é NFT –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ë—Ä–Ω—É—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ.");
  setDraggedItem(null); // —Å–±—Ä–æ—Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
  setTimeout(() => setMessage(""), 3000); // –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫
  return;
  }
  setDraggedItem(item);

  console.log("üì¶ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π:", gemContract, nftContract);

  // –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–ö–ê
  if (!gemContract || !nftContract) {
    setMessage("‚ùå –û—à–∏–±–∫–∞: –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
    console.error("gemContract –∏–ª–∏ nftContract –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã");
    return;
  }

  // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
  const gameGemsAddress = gemContract.target?.toLowerCase();
  const gameItemNFTAddress = nftContract.target?.toLowerCase();

  try {
    console.log("üéØ –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç:", item);

    const [attributeKey, attributeValue] = Object.entries(item.attributes || {})[0] || [];
    const rarityMap = { Common: 1, Rare: 2, Epic: 3, Legendary: 4 };
    const rarityValue = rarityMap[item.rarity] || 0;

    const nftJson = {
      itemType: item.type,
      rarity: rarityValue,
      bonus: {
        attribute: attributeKey || "unknown",
        value: attributeValue || 0,
      },
      image: item.image,
    };

    console.log("üì¶ NFT JSON —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:", nftJson);

    const res = await axios.post(`${backendUrl}/nft/create-json`, {
      account,
      itemId: item.id,
      json: nftJson,
    });
    if (!res.data || !res.data.uri) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –≤ S3");

    const uri = res.data.uri;
    console.log("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. URI:", uri);

    console.log("ü™ô –ú–∏–Ω—Ç–∏–º NFT —á–µ—Ä–µ–∑ wrapItemAsNFT...");
    console.log("  - itemType:", nftJson.itemType);
    console.log("  - rarity:", Number(nftJson.rarity));
    console.log("  - bonus:", Number(nftJson.bonus.value));
    console.log("  - uri:", uri);

    const tx = await gemContract.wrapItemAsNFT(
      nftJson.itemType,
      Number(nftJson.rarity),
      Number(nftJson.bonus.value),
      uri
    );

    console.log("‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...");
    const receipt = await tx.wait();

    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!");
    console.log("üßæ –í—Å–µ –ª–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", receipt.logs);

    const ifaceGameGems = new Interface([
      "event ItemWrapped(address indexed player, uint256 tokenId, string itemType, uint8 rarity, uint8 bonus, string uri)",
    ]);
    const ifaceGameItem = new Interface([
      "event NFTMinted(address indexed to, uint256 tokenId, string itemType, uint8 rarity, uint8 bonus, string uri)",
    ]);

    let tokenId;
      for (const log of receipt.logs) {
        try {
          const logAddress = log.address.toLowerCase();
          if (logAddress === gameGemsAddress) {
            const parsed = ifaceGameGems.parseLog(log);
            console.log("üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ GameGems:", parsed.name, parsed.args);
            if (parsed.name === "ItemWrapped") {
              tokenId = Number(parsed.args.tokenId);
              break;
            }
          } else if (logAddress === gameItemNFTAddress) {
            const parsed = ifaceGameItem.parseLog(log);
            console.log("üì® –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ GameItemNFT:", parsed.name, parsed.args);
            if (parsed.name === "NFTMinted") {
              tokenId = Number(parsed.args.tokenId);
              break;
            }
          }
        } catch (parseErr) {
          console.warn("‚ö†Ô∏è –õ–æ–≥ –Ω–µ –ø–æ–¥–æ—à—ë–ª:", parseErr);
        }
      }

    if (!tokenId) throw new Error("‚ùå –°–æ–±—ã—Ç–∏–µ ItemWrapped –∏–ª–∏ NFTMinted –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    console.log("üéâ NFT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. Token ID:", tokenId);

    const newNFT = {
      tokenId,
      itemType: nftJson.itemType,
      rarity: nftJson.rarity,
      bonus: nftJson.bonus,
      image: nftJson.image,
      uri,
      owner: account,
    };

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º NFT –≤ S3...");
    await axios.post(`${backendUrl}/nft/save`, newNFT);
    console.log("‚úÖ NFT —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");

    setNftInventory((prev) => [...prev, newNFT]);
    setInventory((prev) => prev.filter((i) => i.id !== item.id));
    try {
      await axios.delete(`${backendUrl}/inventory/${account}/${item.id}`);
      console.log(`üóëÔ∏è –ü—Ä–µ–¥–º–µ—Ç ${item.id} —É–¥–∞–ª—ë–Ω –∏–∑ S3`);
    } catch (deleteErr) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç ${item.id} –∏–∑ S3:`, deleteErr);
    }
    setMessage("‚úÖ NFT —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω!");
    setDraggedItem(null);
    setTimeout(() => setMessage(""), 3000);
  } catch (err) {
    console.error("üî• –û—à–∏–±–∫–∞ –æ–±—ë—Ä—Ç–∫–∏:", err);
    setMessage("‚ùå –û—à–∏–±–∫–∞: " + err.message);
  }
};

  return (
    <div className="wrap-nft-panel">
      <h3>üîó –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ NFT</h3>
      <div
        className="wrap-nft-dropzone"
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
      >
        {draggedItem ? (
          <span>{draggedItem.type} (‚≠ê{draggedItem.rarity}) –≥–æ—Ç–æ–≤ –∫ –æ–±—ë—Ä—Ç–∫–µ</span>
        ) : (
          <span>–ü–µ—Ä–µ—Ç–∞—â–∏ —Å—é–¥–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è</span>
        )}
      </div>
      {message && <p>{message}</p>}
    </div>
  );
}
