import React from "react";
import "../styles/GameScreen.css";
import { useWeb3 } from "../contexts/Web3Provider";
import QuickSellZone from "../components/QuickSellZone";
import PlayerStatsPanel, { calculateStats } from "../components/PlayerStatsPanel";
import generateItem from "../utils/itemGenerator";
import WrapNFTPanel from "../components/WrapNFTPanel";
import { LayoutPanelLeft } from 'lucide-react';
import axios from "axios";


const fetchLocalGems = async (backendUrl, account, setLocalGems) => {
  try {
    const res = await axios.get(`${backendUrl}/profile/${account}`);
    if (res.data && typeof res.data.local_gems === 'number') {
      console.log("üéØ –ü–æ–ª—É—á–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ GEM –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:", res.data.local_gems);
      setLocalGems(res.data.local_gems);
    }
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
  }
};

const saveLocalGems = async (backendUrl, account, gems) => {
  try {
    await axios.patch(`${backendUrl}/profile/${account}`, {
      local_gems: gems,
    });
    console.log("üíæ –õ–æ–∫–∞–ª—å–Ω—ã–µ GEM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å:", gems);
  } catch (err) {
    console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö GEM:", err);
  }
};

const EQUIPMENT_SLOTS = ["Pickaxe", "Gloves", "Boots", "Vest", "Lamp",];
const INVENTORY_TABS = [...EQUIPMENT_SLOTS, "NFT"];

export default function GameScreen({ onAccountPage, onBack, onMarketplace }) {
  const { account, gemContract, backendUrl, localGems, setLocalGems, nftContract } = useWeb3();
  const [equipment, setEquipment] = React.useState({});
  const [inventory, setInventory] = React.useState([]);
  const [nftInventory, setNftInventory] = React.useState([]);
  const [activeTab, setActiveTab] = React.useState("Pickaxe");
  const [showMenu, setShowMenu] = React.useState(false);
  const [hoveredSlot, setHoveredSlot] = React.useState(null);
  const [popupMessage, setPopupMessage] = React.useState("");
  const [tooltip, setTooltip] = React.useState({ visible: false, x: 0, y: 0, item: null });
  const [sellPrices, setSellPrices] = React.useState({});


  React.useEffect(() => {
    if (account && backendUrl) {
      fetchLocalGems(backendUrl, account, setLocalGems);
    }
  }, [account, backendUrl]);

  React.useEffect(() => {
    if (!account) return;

    localStorage.removeItem("equipment");

    const saved = localStorage.getItem(`equipment_${account}`);
    if (saved) {
      try {
        const parsed = JSON.parse(saved);
        if (typeof parsed === 'object' && parsed !== null) {
          setEquipment(parsed);
          console.log("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –∏–∑ localStorage:", parsed);
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ equipment –∏–∑ localStorage", err);
      }
    }
  }, [account])
  
  React.useEffect(() => {
    if (account && Object.keys(equipment).length > 0) {
      localStorage.setItem(`equipment_${account}`, JSON.stringify(equipment));
      console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –≤ localStorage:", equipment);
    }
  }, [equipment, account]);

  React.useEffect(() => {
    console.log("üîê –ê–∫–∫–∞—É–Ω—Ç:", account);
    console.log("üì¶ –õ–æ–∫–∞–ª—å–Ω—ã–µ GEM (–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞):", localGems);
  }, [account, localGems]);

  React.useEffect(() => {
    const loadInventory = async () => {
      try {
        const res = await axios.get(`${backendUrl}/inventory/${account}`);
        let loaded = [];

        if (Array.isArray(res.data)) {
          loaded = res.data;
        } else if (res.data && Array.isArray(res.data.items)) {
          loaded = res.data.items;
        } else {
          console.warn("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", res.data);
        }

        // üß™ ID —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        const equippedIds = Object.values(equipment)
          .filter((item) => item?.id)
          .map((item) => item.id);

        console.log("üì• –ó–∞–≥—Ä—É–∂–µ–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", loaded);
        console.log("üß™ –£–¥–∞–ª–∏–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID:", equippedIds);

        // üßπ –£–¥–∞–ª–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const filtered = loaded.filter((item) => !equippedIds.includes(item.id));
        console.log("üì§ –û—á–∏—â–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", filtered);

        setInventory(filtered);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", err);
        showPopup("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å");
      }
    };
    if (account && backendUrl) loadInventory();
  }, [account, backendUrl, equipment]);

  React.useEffect(() => {
    const loadNFTs = async () => {
      if (!account || !nftContract) {
        console.warn("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ NFT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É NFT");
        setNftInventory([]);
        return;
      }

      try {
        const res = await axios.get(`${backendUrl}/nft`);
        const allNFTs = Array.isArray(res.data) ? res.data : [];
        console.log("üé´ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ NFT —Å –±—ç–∫–∞:", allNFTs);

        const ownedNFTs = [];
        for (const item of allNFTs) {
          try {
            const ownerOnChain = await nftContract.ownerOf(item.tokenId);
            if (ownerOnChain.toLowerCase() === account.toLowerCase()) {
              ownedNFTs.push(item);
            }
          } catch (err) {
            console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–æ–∫–µ–Ω–∞ ${item.tokenId}`, err);
          }
        }

        console.log(`‚úÖ NFT, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—É ${account}:`, ownedNFTs);
        setNftInventory(ownedNFTs);

        const equippedNFTIds = Object.values(equipment)
          .filter((item) => item?.fromNFT)
          .map((item) => item.id);

        console.log("üß™ ID —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö NFT:", equippedNFTIds);

        const virtualItemsFromNFTs = ownedNFTs
          .map(nft => ({
            id: `nft-${nft.tokenId}`,
            type: nft.itemType,
            rarity: nft.rarity,
            image: nft.image,
            attributes: {
              [nft.bonus.attribute]: nft.bonus.value
            },
            fromNFT: true
          }))
          .filter(item => !equippedNFTIds.includes(item.id));

        console.log("üéØ NFT –¥–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:", virtualItemsFromNFTs);

        setInventory((prev) => {
          const filtered = prev.filter(item => !item.fromNFT);
          return [...filtered, ...virtualItemsFromNFTs];
        });

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT:", err);
        setNftInventory([]);
        showPopup("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å NFT");
      }
    };

  loadNFTs();
  }, [account, backendUrl, nftContract, equipment]); // üß† equipment –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

  

  React.useEffect(() => {
    const fetchPrices = async () => {
      try {
        const res = await axios.get(`${backendUrl}/sell-prices`);
        setSellPrices(res.data);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–¥–∞–∂–∏:", err);
      }
    };
    fetchPrices();
  }, [backendUrl]);

  const handleClick = async () => {
    const stats = calculateStats(equipment);
    const earnedGems = Math.floor(stats.clickPower * stats.gemMultiplier);
    const newLocalGems = localGems + earnedGems;
    setLocalGems(newLocalGems);
    console.log(`üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ ${earnedGems} GEM ‚Üí –≤—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å: ${newLocalGems}`);
    const dropBoost = stats.itemDropBoost || 0;
    const baseDropChance = 0.03; // –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å 3%
    const finalChance = baseDropChance + dropBoost / 100;
    if (Math.random() < finalChance) {
      try {
        const newItem = generateItem(stats.bootsRarityMod, stats.vestLuckBoost);
        const res = await axios.post(`${backendUrl}/inventory/${account}`, newItem);
        if (res.status !== 200) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ");
        setInventory((prev) => [...prev, newItem]);
        showPopup("üéÅ –í–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç!");
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:", err);
        showPopup("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥—Ä–æ–ø–∞");
      }
    }
  };

  const showPopup = (message) => {
    setPopupMessage(message);
    setTimeout(() => setPopupMessage(""), 2000);
  };

  const handleMouseEnter = (event, item, fromEquipment = false) => {
    const rect = event.currentTarget.getBoundingClientRect();
    setTooltip({
      visible: true,
      x: rect.left - 260,
      y: fromEquipment ? rect.top - 120 : rect.top,
      item,
    });
  };

  const handleMouseLeave = () => {
    setTooltip({ visible: false, x: 0, y: 0, item: null });
  };

  const onDropToEquipment = (e, slotKey) => {
    e.preventDefault();
    const raw = e.dataTransfer.getData("item");

    if (!raw) {
      showPopup("‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º!");
      return;
    }
    
    let item;
    try {
      item = JSON.parse(raw);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err);
      showPopup("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–º–µ—Ç–∞");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: NFT –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
    if (!item.attributes) {
      showPopup("‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–º!");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–∞ —Å–ª–æ—Ç—É
    if (item.type !== slotKey) {
      showPopup("‚ùå –ù–µ–ª—å–∑—è –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ —ç—Ç–æ—Ç —Å–ª–æ—Ç");
      return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Å–ª–æ—Ç
    setEquipment((prev) => {
      const prevItem = prev[slotKey];
      setInventory((inv) => {
        let updated = inv.filter((i) => i.id !== item.id);
        if (prevItem && !updated.find((i) => i.id === prevItem.id)) {
          updated = [...updated, prevItem];
        }
        return updated;
      });
      return { ...prev, [slotKey]: item };
    });

    setHoveredSlot(null);
    setTooltip({ visible: false, x: 0, y: 0, item: null });
  };

  const onDragOver = (e) => {
    e.preventDefault();
  };

 const onDropToInventory = (e) => {
  e.preventDefault();
  const item = JSON.parse(e.dataTransfer.getData("item"));
  console.log("üì• –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:", item);

  setEquipment((prev) => {
    const newEquip = { ...prev };
    for (const slot in newEquip) {
      if (newEquip[slot]?.id === item.id) {
        console.log(`‚ùå –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ—Ç–∞ "${slot}" –ø—Ä–µ–¥–º–µ—Ç:`, item);
        delete newEquip[slot];
        break;
      }
    }

    // üíæ –≤—Ä—É—á–Ω—É—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (account) {
      localStorage.setItem(`equipment_${account}`, JSON.stringify(newEquip));
      console.log("üíæ [manual save] equipment —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:", newEquip);
    }

    return newEquip;
  });

  if (item.fromNFT) {
    console.log("üîÅ NFT-–ø—Ä–µ–¥–º–µ—Ç, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ nftInventory:", item);
    setNftInventory((prev) => {
      const exists = prev.some((nft) => `nft-${nft.tokenId}` === item.id);
      if (exists) {
        console.log("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –≤ nftInventory, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ:", item);
        return prev;
      }

      const tokenId = item.id.replace("nft-", "");
      const newNFT = {
        tokenId,
        itemType: item.type,
        rarity: item.rarity,
        image: item.image,
        bonus: {
          attribute: Object.keys(item.attributes)[0],
          value: Object.values(item.attributes)[0],
        },
      };

      console.log("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ nftInventory:", newNFT);
      return [...prev, newNFT];
    });

    setTooltip({ visible: false, x: 0, y: 0, item: null });
    return;
  }

  // üéí –û–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ inventory
  setInventory((prev) => {
    const exists = prev.some((i) => i.id === item.id);
    if (exists) {
      console.log("‚ö†Ô∏è –£–∂–µ –µ—Å—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º:", item);
      return prev;
    }

    console.log("‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ã—á–Ω—ã–π inventory:", item);
    return [...prev, item];
  });

  setTooltip({ visible: false, x: 0, y: 0, item: null });
};
  const onDragOverInventory = (e) => {
    e.preventDefault();
  };
  
  const handleSafeNavigation = async (callback) => {
  try {
    if (account && backendUrl) {
      await axios.patch(`${backendUrl}/profile/${account}`, {
        local_gems: localGems
      });
      console.log("üíæ [safe-nav] –õ–æ–∫–∞–ª—å–Ω—ã–µ GEM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º:", localGems);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º:", err);
  }
  callback();
};


  return (
    <div className={`game-layout ${showMenu ? "with-sidebar" : ""}`}>
      <div className="sidebar-toggle-button" onClick={() => setShowMenu(!showMenu)} title="–ú–µ–Ω—é">
        <LayoutPanelLeft size={24} stroke="#ffffff" />
      </div>

      <div className="sidebar-slideout">
        <div className="account-menu">
          <button onClick={() => handleSafeNavigation(onAccountPage)}>–ê–∫–∫–∞—É–Ω—Ç</button>
          <button onClick={() => handleSafeNavigation(onBack)}>–í—ã–π—Ç–∏</button>
          <button onClick={() => handleSafeNavigation(onMarketplace)}>üõí –ú–∞–≥–∞–∑–∏–Ω</button>
        </div>
      </div>

      <div className="game-screen">
        {popupMessage && <div className="popup-message">{popupMessage}</div>}

        {tooltip.visible && (
          <div
            className="tooltip"
            style={{
              position: "fixed",
              top: tooltip.y,
              left: tooltip.x,
              backgroundColor: "rgba(0,0,0,0.8)",
              color: "#fff",
              padding: "10px",
              borderRadius: "6px",
              zIndex: 10000,
              maxWidth: 250,
              pointerEvents: "none",
              whiteSpace: "normal",
            }}
          >
            {"tokenId" in tooltip.item && (
              <div style={{ fontWeight: "bold", fontSize: "16px", marginBottom: "6px", color: "#ffd700" }}>
                üé´ NFT
              </div>
            )}
          <div><b>–¢–∏–ø:</b> {tooltip.item.type || tooltip.item.itemType}</div>
          <div><b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {tooltip.item.rarity}</div>

          {"tokenId" in tooltip.item && (
            <>
              <div><b>Token ID:</b> {tooltip.item.tokenId}</div>
              <div><b>–ë–æ–Ω—É—Å:</b></div>
              <ul style={{ listStyleType: "none", paddingLeft: 0 }}>
                <li>{tooltip.item.bonus.attribute}: {tooltip.item.bonus.value}</li>
              </ul>
            </>
          )}

          {"attributes" in tooltip.item && tooltip.item.attributes && (
            <>
              <div><b>–ê—Ç—Ä–∏–±—É—Ç—ã:</b></div>
              <ul style={{ listStyleType: "none", paddingLeft: 0 }}>
                {Object.entries(tooltip.item.attributes).map(([key, value]) => {
                  let label = key;
                  let displayValue = value;

                  switch (key) {
                    case "rarityModBonus":
                      label = "üåü –®–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏";
                      displayValue = `+${value}%`;
                      break;
                    case "vestLuckBoost":
                      label = "üçÄ –£–¥–∞—á–∞";
                      displayValue = `+${value}%`;
                      break;
                    case "dropChanceBonus":
                      label = "üì¶ –®–∞–Ω—Å –¥—Ä–æ–ø–∞";
                      displayValue = `+${value}%`;
                      break;
                    case "flatPowerBonus":
                      label = "üéØ –°–∏–ª–∞ –∫–ª–∏–∫–∞";
                      displayValue = `+${value}`;
                      break;
                    case "gemMultiplierBonus":
                      label = "üíé –ú–Ω–æ–∂–∏—Ç–µ–ª—å GEM";
                      displayValue = `x${value}`;
                      break;
                    default:
                      label = key;
                      displayValue = value;
                  }

                  return (
                    <li key={key}>
                      {label}: {displayValue}
                    </li>
                  );
                })}
              </ul>
            </>
          )}
        </div>
      )}

          <div style={{ display: "flex", gap: 20, alignItems: "stretch", marginBottom: 20 }}>
            <div className="player-stats-wrapper">
              <PlayerStatsPanel equipment={equipment} />
            </div>

            <div className="clicker">
              <h2 className="clicker-title">üî• Clicker</h2>
              <button className="clicker-button" onClick={handleClick}>Click!</button>
              <p className="clicker-gems">üíé GEM üíé : {localGems}</p>
            </div>
          </div>

          <div style={{ flex: "1 1 60%", display: "flex", gap: 20 }}>
            <div className="equipment">
              <h3>üéΩ Equipment</h3>
              <div style={{ display: "flex", flexDirection: "column", gap: 10, marginTop: 10 }}>
                {EQUIPMENT_SLOTS.map((slot) => (
                  <div
                    key={slot}
                    className={`slot ${hoveredSlot === slot ? "drag-over" : ""}`}
                    onDrop={(e) => onDropToEquipment(e, slot)}
                    onDragOver={onDragOver}
                    onDragLeave={() => setHoveredSlot(null)}
                    onDragEnter={() => setHoveredSlot(slot)}
                  >
                    <strong>{slot}</strong>
                    {equipment[slot] ? (
                      <div
                      className={`item ${equipment[slot]?.fromNFT ? 'nft-border' : ''}`}
                      draggable
                      onDragStart={(e) =>
                        e.dataTransfer.setData("item", JSON.stringify(equipment[slot]))
                      }
                      title={`${equipment[slot].type} (${equipment[slot].rarity})`}
                      style={{ marginTop: 4 }}
                    >
                      <img
                        src={equipment[slot].image}
                        alt={equipment[slot].type}
                        style={{
                          width: 32,
                          height: 32,
                          objectFit: "contain",
                          marginTop: 4,
                        }}
                        onMouseEnter={(e) => handleMouseEnter(e, equipment[slot], true)}
                        onMouseLeave={handleMouseLeave}
                      />
                    </div>
                    ) : (
                      <span className="empty">Empty</span>
                    )}
                  </div>
                ))}
              </div>
            </div>

          <div className="inventory" onDrop={onDropToInventory} onDragOver={onDragOverInventory}>
          <h3>üéí Inventory</h3>
          
          <div className="tabs">
            {INVENTORY_TABS.map((tab) => (
              <button
                key={tab}
                className={`tab-button ${activeTab === tab ? "active" : ""}`}
                onClick={() => setActiveTab(tab)}
              >
                {tab}
              </button>
            ))}
          </div>

          <div className="inventory-list">
            {activeTab === "NFT"
                ? nftInventory.map((item) => (
                    <div
                      key={item.tokenId}
                      className="item"
                      title={`${item.itemType} (‚≠ê${item.rarity})`}
                      onMouseEnter={(e) => handleMouseEnter(e, item)}
                      onMouseLeave={handleMouseLeave}
                    >
                      <img src={item.image} alt={item.itemType} />
                    </div>
                  ))
              : inventory
                  .filter((item) => item.type === activeTab)
                  .map((item) => (
                    <div
                      key={item.id}
                      className={`item ${item.fromNFT ? 'nft-border' : ''}`}
                      draggable
                      onDragStart={(e) => e.dataTransfer.setData("item", JSON.stringify(item))}
                      onMouseEnter={(e) => handleMouseEnter(e, item)}
                      onMouseLeave={handleMouseLeave}
                    >
                      <img src={item.image} alt={item.type} />
                    </div>
                  ))}
          </div>
        </div>

          <div style={{ display: "flex", flexDirection: "column", gap: 20 }}>
            <QuickSellZone
              sellPrices={sellPrices}
              inventory={inventory}
              setInventory={setInventory}
              setGems={setLocalGems}
              account={account}
            />

            <WrapNFTPanel
              inventory={inventory}
              setInventory={setInventory}
              setNftInventory={setNftInventory}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
