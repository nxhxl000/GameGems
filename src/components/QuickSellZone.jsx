import React, { useState } from "react";
import { deleteItemFromBackend } from "../utils/sellHelpers";
import "../styles/QuickSellZone.css";

export default function QuickSellZone({
  sellPrices,
  inventory,
  setInventory,
  setGems,
  account,
}) {
  const [confirmItem, setConfirmItem] = useState(null);

  const handleDrop = async (e) => {
    e.preventDefault();
    const raw = e.dataTransfer.getData("item");
    if (!raw) return;

    let item;
    try {
      item = JSON.parse(raw);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ drop:", err);
      return;
    }

    // üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ NFT
    if (item.fromNFT) {
      alert("‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é NFT –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–∞–Ω.");
      return;
    }

    const rarityKey = item.rarity?.toLowerCase();
    const price = Number(sellPrices[rarityKey]);

    if (!price && price !== 0) {
      console.warn("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏:", item.rarity, "| –í—Å–µ —Ü–µ–Ω—ã:", sellPrices);
    }

    if (rarityKey === "epic" || rarityKey === "legendary") {
      setConfirmItem(item);
    } else {
      await sell(item, price);
    }
  };

  const sell = async (item, price) => {
    try {
      console.log("–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:", price);
      await deleteItemFromBackend(account, item.id);
      setInventory((prev) => prev.filter((i) => i.id !== item.id));
      setGems((prev) => {
        console.log("–ë—ã–ª–æ GEM:", prev, "–î–æ–±–∞–≤–∏–º:", price);
        return prev + price;
      });
      setConfirmItem(null);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ:", err);
      alert("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç.");
    }
  };

  return (
    <div
      className="quick-sell-zone"
      onDragOver={(e) => e.preventDefault()}
      onDrop={handleDrop}
    >
      <h3>üóë –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞</h3>
      <ul className="sell-prices">
        {["common", "rare", "epic", "legendary"].map((rarity) => (
          <li key={rarity}>
            {rarity}: {sellPrices[rarity] ?? "?"} GEM
          </li>
        ))}
      </ul>

      {confirmItem && (
        <div className="sell-confirm-modal">
          <p>
            –≠—Ç–æ {confirmItem.rarity === "legendary" ? "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π" : "—ç–ø–∏—á–µ—Å–∫–∏–π"} –ø—Ä–µ–¥–º–µ—Ç.
            –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å?
          </p>
          <div className="sell-confirm-buttons">
            <button
              className="yes"
              onClick={() =>
                sell(confirmItem, Number(sellPrices[confirmItem.rarity?.toLowerCase()] || 0))
              }
            >
              ‚úÖ –î–∞
            </button>
            <button
              className="no"
              onClick={() => setConfirmItem(null)}
            >
              ‚ùå –ù–µ—Ç
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
