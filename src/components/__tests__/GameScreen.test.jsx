import React from 'react';
import { render, fireEvent, screen, waitFor } from '@testing-library/react';
import GameScreen from '../GameScreen';
import { Web3Context } from '../../contexts/Web3Provider';

// –ú–æ–∫–∞–µ–º axios –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
jest.mock('axios');
jest.mock('../../utils/itemGenerator', () => () => ({
  id: 'test-id',
  type: 'Pickaxe',
  rarity: 'Common',
  image: 'image.png',
  attributes: { flatPowerBonus: 1 }
}));

const mockContext = {
  account: '0x123',
  gemContract: {},
  backendUrl: 'http://localhost:8000',
  localGems: 0,
  setLocalGems: jest.fn(),
  nftContract: {
    ownerOf: jest.fn().mockResolvedValue('0x123')
  }
};

const renderGameScreen = () =>
  render(
    <Web3Context.Provider value={mockContext}>
      <GameScreen
        onAccountPage={() => {}}
        onBack={() => {}}
        onMarketplace={() => {}}
      />
    </Web3Context.Provider>
  );

describe('GameScreen', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫', () => {
    renderGameScreen();
    expect(screen.getByText('üî• Clicker')).toBeInTheDocument();
    expect(screen.getByText('üéΩ Equipment')).toBeInTheDocument();
    expect(screen.getByText('üéí Inventory')).toBeInTheDocument();
  });

  it('—Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è', () => {
    renderGameScreen();
    const tabs = ['Pickaxe', 'Gloves', 'Boots', 'Vest', 'Lamp', 'NFT'];
    tabs.forEach(tab => {
      expect(screen.getByText(tab)).toBeInTheDocument();
    });
  });

  it('—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ Click', async () => {
    renderGameScreen();
    const clickButton = screen.getByText('Click!');
    fireEvent.click(clickButton);
    await waitFor(() => {
      expect(mockContext.setLocalGems).toHaveBeenCalled();
    });
  });

  it('–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è', () => {
    renderGameScreen();
    const glovesTab = screen.getByText('Gloves');
    fireEvent.click(glovesTab);
    expect(glovesTab.className).toMatch(/active/);
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç popup —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ popupMessage', async () => {
    renderGameScreen();
    const popup = document.createElement('div');
    popup.className = 'popup-message';
    popup.textContent = 'üéÅ –í–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç!';
    document.body.appendChild(popup);
    expect(screen.getByText('üéÅ –í–∞–º –≤—ã–ø–∞–ª –ø—Ä–µ–¥–º–µ—Ç!')).toBeInTheDocument();
  });

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç—É–ª—Ç–∏–ø –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏', async () => {
    renderGameScreen();
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.innerHTML = `
      <div><b>–¢–∏–ø:</b> Boots</div>
      <div><b>–†–µ–¥–∫–æ—Å—Ç—å:</b> Epic</div>
    `;
    document.body.appendChild(tooltip);
    expect(screen.getByText(/–¢–∏–ø:/)).toBeInTheDocument();
    expect(screen.getByText(/–†–µ–¥–∫–æ—Å—Ç—å:/)).toBeInTheDocument();
  });

  it('—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç QuickSellZone', () => {
    renderGameScreen();
    expect(screen.getByText(/QuickSell/i)).toBeInTheDocument(); // –∏–ª–∏ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –µ—Å–ª–∏ –≤ –∑–æ–Ω–µ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
  });

  it('—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç WrapNFTPanel', () => {
    renderGameScreen();
    expect(screen.getByText(/Wrap NFT/i)).toBeInTheDocument(); // –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  });

  it('–Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç', () => {
    renderGameScreen();
    const accountButton = screen.getByText('–ê–∫–∫–∞—É–Ω—Ç');
    const marketplaceButton = screen.getByText('üõí –ú–∞–≥–∞–∑–∏–Ω');
    fireEvent.click(accountButton);
    fireEvent.click(marketplaceButton);
  });
});
