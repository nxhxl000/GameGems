// src/components/__tests__/AccountPage.test.jsx
import React from "react";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import AccountPage from "../AccountPage";
import { Web3Context } from "../../contexts/Web3Provider";

describe("AccountPage", () => {
  const mockFetchHistory = jest.fn();
  const mockSendLocalGems = jest.fn().mockResolvedValue(true);
  const mockBuyGems = jest.fn();
  const mockSetGemCount = jest.fn();
  const mockOnBack = jest.fn();

  const mockWeb3Context = {
    txHistory: [
      {
        type: "–ü–æ–∫—É–ø–∫–∞",
        value: "10 GEM",
        timestamp: "12:00",
        blockNumber: 123,
      },
      {
        type: "NFT",
        value: "NFT #1",
        timestamp: "12:05",
        blockNumber: 124,
      },
    ],
    localGems: 100,
    onChainGems: 300,
    fetchHistory: mockFetchHistory,
  };

  const mockProps = {
    account: "0xABC123",
    username: "TestUser",
    gems: 300,
    gemCount: 10,
    gemPrice: 0.01,
    setGemCount: mockSetGemCount,
    onSendLocalGems: mockSendLocalGems,
    onBuyGems: mockBuyGems,
    onBack: mockOnBack,
  };

  const renderWithContext = () =>
    render(
      <Web3Context.Provider value={mockWeb3Context}>
        <AccountPage {...mockProps} />
      </Web3Context.Provider>
    );

  beforeEach(() => {
    jest.clearAllMocks();
  });

  it("renders user info and balances", () => {
    renderWithContext();
    expect(screen.getByText("üë§ TestUser")).toBeInTheDocument();
    expect(screen.getByText(/0xABC123/)).toBeInTheDocument();
    expect(screen.getByText(/GEM –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ: 300/)).toBeInTheDocument();
    expect(screen.getByText(/–õ–æ–∫–∞–ª—å–Ω—ã–µ GEM: 100/)).toBeInTheDocument();
  });

  it("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert, –µ—Å–ª–∏ GEM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª—å—à–µ, —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ", async () => {
  window.alert = jest.fn();
  renderWithContext();
  const input = screen.getByPlaceholderText("–°–∫–æ–ª—å–∫–æ GEM –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?");
  fireEvent.change(input, { target: { value: "200" } }); // localGems = 100
  const button = screen.getByText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GEM");
  fireEvent.click(button);
  expect(window.alert).toHaveBeenCalledWith("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö GEM");
});

  it("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç alert –ø—Ä–∏ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏", async () => {
  window.alert = jest.fn();
  renderWithContext();
  const button = screen.getByText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
  fireEvent.click(button);
  await waitFor(() => {
    expect(mockFetchHistory).toHaveBeenCalled();
    expect(window.alert).toHaveBeenCalledWith("–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
  });
});

  it("–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ üì§ –¥–ª—è –î–µ–ø–æ–∑–∏—Ç –∏ üéÅ –¥–ª—è –ü—Ä–µ–¥–º–µ—Ç", () => {
  const txHistoryWithAllTypes = [
    { type: "–î–µ–ø–æ–∑–∏—Ç", value: "10 GEM", timestamp: "12:10", blockNumber: 125 },
    { type: "–ü—Ä–µ–¥–º–µ—Ç", value: "SuperBoots", timestamp: "12:15", blockNumber: 126 },
  ];

  render(
    <Web3Context.Provider value={{ ...mockWeb3Context, txHistory: txHistoryWithAllTypes }}>
      <AccountPage {...mockProps} />
    </Web3Context.Provider>
  );

  expect(screen.getByText("üì§")).toBeInTheDocument();
  expect(screen.getByText("üéÅ")).toBeInTheDocument();
  });

  it("—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ GEM", async () => {
  renderWithContext();
  const input = screen.getByPlaceholderText("–°–∫–æ–ª—å–∫–æ GEM –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?");
  fireEvent.change(input, { target: { value: "20" } });
  const button = screen.getByText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GEM");
  fireEvent.click(button);

  await waitFor(() => {
    expect(mockSendLocalGems).toHaveBeenCalledWith(20);
    expect(input.value).toBe(""); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±—Ä–æ—Å–∞ localAmount
  });
});

  it("calls onBuyGems and fetchHistory when –∫—É–ø–∏—Ç—å GEM", async () => {
    renderWithContext();
    const button = screen.getByText("–ö—É–ø–∏—Ç—å GEM");
    fireEvent.click(button);
    await waitFor(() => {
      expect(mockBuyGems).toHaveBeenCalled();
      expect(mockFetchHistory).toHaveBeenCalled();
    });
  });

  it("calls onSendLocalGems and fetchHistory when –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GEM", async () => {
    renderWithContext();
    const input = screen.getByPlaceholderText("–°–∫–æ–ª—å–∫–æ GEM –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?");
    fireEvent.change(input, { target: { value: "20" } });
    const button = screen.getByText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GEM");
    fireEvent.click(button);
    await waitFor(() => {
      expect(mockSendLocalGems).toHaveBeenCalledWith(20);
      expect(mockFetchHistory).toHaveBeenCalled();
    });
  });

  it("shows alert on invalid –æ—Ç–ø—Ä–∞–≤–∫–∞ GEM", () => {
    window.alert = jest.fn();
    renderWithContext();
    const input = screen.getByPlaceholderText("–°–∫–æ–ª—å–∫–æ GEM –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?");
    fireEvent.change(input, { target: { value: "-5" } });
    const button = screen.getByText("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GEM");
    fireEvent.click(button);
    expect(window.alert).toHaveBeenCalledWith("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GEM");
  });

  it("–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–∫–æ–Ω–∫—É ‚ÑπÔ∏è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", () => {
  const customContext = {
    ...mockWeb3Context,
    txHistory: [
      {
        type: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø",
        value: "??",
        timestamp: "00:00",
        blockNumber: 999,
      },
    ],
  };

  render(
    <Web3Context.Provider value={customContext}>
      <AccountPage {...mockProps} />
    </Web3Context.Provider>
  );

  expect(screen.getByText("‚ÑπÔ∏è")).toBeInTheDocument(); // –ø—Ä–æ–≤–µ—Ä–∫–∞ fallback-–∏–∫–æ–Ω–∫–∏
  expect(screen.getByText("??")).toBeInTheDocument(); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
  expect(screen.getByText(/–ë–ª–æ–∫ #999/)).toBeInTheDocument(); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞
});

it("–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç value –±–µ–∑ —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç GEM –∏ NFT", () => {
  const customContext = {
    ...mockWeb3Context,
    txHistory: [
      {
        type: "Custom",
        value: "SomeValue",
        timestamp: "01:01",
        blockNumber: 888,
      },
    ],
  };

  render(
    <Web3Context.Provider value={customContext}>
      <AccountPage {...mockProps} />
    </Web3Context.Provider>
  );

  expect(screen.getByText("SomeValue")).toBeInTheDocument(); // –±–µ–∑ üíé –∏–ª–∏ üé´
});

  it("displays transaction history correctly", () => {
  renderWithContext();

  expect(screen.getByText("üõí")).toBeInTheDocument();                     // –ü–æ–∫—É–ø–∫–∞
  expect(screen.queryAllByText("üì§")).toHaveLength(0);                    // –ù–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
  expect(screen.getByText((text) => text.includes("üé´"))).toBeInTheDocument(); // NFT
  expect(screen.getByText(/–ë–ª–æ–∫ #123/)).toBeInTheDocument();
  expect(screen.getByText(/–ë–ª–æ–∫ #124/)).toBeInTheDocument();
});

  it("shows fallback if no transactions", () => {
    render(
      <Web3Context.Provider value={{ ...mockWeb3Context, txHistory: [] }}>
        <AccountPage {...mockProps} />
      </Web3Context.Provider>
    );
    expect(screen.getByText("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")).toBeInTheDocument();
  });

  it("–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç ? –∫–∞–∫ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ gemCount –∏–ª–∏ gemPrice –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", () => {
  const propsWithNoPrice = { ...mockProps, gemCount: null, gemPrice: null };

  render(
    <Web3Context.Provider value={mockWeb3Context}>
      <AccountPage {...propsWithNoPrice} />
    </Web3Context.Provider>
  );

  expect(screen.getByText(/üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ‚âà \? ETH/)).toBeInTheDocument();
});

  it("calls fetchHistory on '–û–±–Ω–æ–≤–∏—Ç—å'", () => {
    window.alert = jest.fn();
    renderWithContext();
    fireEvent.click(screen.getByText("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"));
    expect(mockFetchHistory).toHaveBeenCalled();
  });

  it("calls onBack when '–ù–∞–∑–∞–¥' clicked", () => {
    renderWithContext();
    fireEvent.click(screen.getByText("üîô –ù–∞–∑–∞–¥"));
    expect(mockOnBack).toHaveBeenCalled();
  });
});
