import React from "react";
import { render, screen } from "@testing-library/react";
import { act } from "react-dom/test-utils";
import MarketplacePage from "../MarketplacePage";
import axios from "axios";
import * as Web3Context from "../../contexts/Web3Provider";

// üß™ –ú–æ–∫–∞–µ–º useWeb3
jest.mock("../../contexts/Web3Provider", () => ({
  useWeb3: jest.fn(),
}));

// üß™ –ú–æ–∫–∞–µ–º axios
jest.mock("axios");

axios.get.mockImplementation((url) => {
  if (url.includes("/metadata-proxy/")) {
    return Promise.resolve({
      data: {
        itemType: "Boots",
        rarity: 2,
        image: "https://example.com/nft.png",
        bonus: {
          attribute: "flatPowerBonus",
          value: 5,
        },
      },
    });
  }
  if (url.includes("/nft")) {
    return Promise.resolve({ data: [] });
  }
  return Promise.reject(new Error("unexpected axios.get call"));
});

axios.post.mockResolvedValue({
  data: {
    recommended_price: 30,
    price_status: "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è",
    deviation_percent: 5,
  },
});


describe("MarketplacePage", () => {
  beforeEach(() => {
    Web3Context.useWeb3.mockReturnValue({
      account: "0xdeadbeef",
      backendUrl: "http://localhost:3001",
      marketplaceContract: {
        getListing: jest.fn().mockResolvedValue({ priceInGems: 25 }),
        listItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
        delistItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
        buyItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
        target: "0xmarketplace",
      },
      nftContract: {
        totalSupply: jest.fn().mockResolvedValue(1),
        tokenURI: jest.fn().mockResolvedValue("https://mock-uri"),
        ownerOf: jest.fn().mockResolvedValue("0x1234567890abcdef1234567890abcdef12345678"),
        getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
        approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
      },
      gemContract: {
        balanceOf: jest.fn().mockResolvedValue(100),
        allowance: jest.fn().mockResolvedValue(100),
        approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
      },
    });
  });

  test("—Ä–µ–Ω–¥–µ—Ä–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥", () => {
    render(<MarketplacePage onBack={jest.fn()} />);
    expect(screen.getByText("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")).toBeInTheDocument();
    expect(screen.getByText("üõí –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT")).toBeInTheDocument();
    expect(screen.getByText("üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ —Ä—ã–Ω–∫–µ")).toBeInTheDocument();
    expect(screen.getByText("üßç –ú–æ–∏ NFT (–Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ)")).toBeInTheDocument();
  });

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö NFT", () => {
    render(<MarketplacePage onBack={jest.fn()} />);
    expect(screen.getByText("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö NFT.")).toBeInTheDocument();
  });

  test("–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–∏—Ö NFT", () => {
    render(<MarketplacePage onBack={jest.fn()} />);
    expect(screen.getByText("–£ –≤–∞—Å –Ω–µ—Ç NFT –≤–Ω–µ –ø—Ä–æ–¥–∞–∂–∏.")).toBeInTheDocument();
  });

  test("–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç NFT –∏–∑ –ª–∏—Å—Ç–∏–Ω–≥–∞", async () => {
    render(<MarketplacePage onBack={jest.fn()} />);
    const nftImage = await screen.findByAltText("NFT 1");
    expect(nftImage).toBeInTheDocument();

    const card = nftImage.closest(".marketplace-card");
    expect(card).toBeTruthy();

    const pTags = card.querySelectorAll("p");

    function findTextInParagraph(label, value) {
      for (const p of pTags) {
        const bold = p.querySelector("b");
        if (!bold) continue;
        const labelText = bold.textContent.trim();
        const fullText = p.textContent.replace(/\s+/g, " ").trim();
        if (labelText === label && fullText.includes(value)) return true;
      }
      return false;
    }

    function findRawTextParagraph(includesText) {
      return Array.from(pTags).some((p) =>
        !p.querySelector("b") && p.textContent.replace(/\s+/g, " ").includes(includesText)
      );
    }

    expect(findTextInParagraph("ID:", "1")).toBe(true);
    expect(findTextInParagraph("–¢–∏–ø:", "Boots")).toBe(true);
    expect(findTextInParagraph("–†–µ–¥–∫–æ—Å—Ç—å:", "–†–µ–¥–∫–∏–π")).toBe(true);
    expect(findTextInParagraph("–ë–æ–Ω—É—Å:", "—Å–∏–ª–∞ –∫–ª–∏–∫–∞")).toBe(true);
    expect(findTextInParagraph("–¶–µ–Ω–∞:", "25")).toBe(true);
    expect(findRawTextParagraph("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ 30 GEM")).toBe(true);
    expect(screen.getByText("‚úÖ –¶–µ–Ω–∞ –≤ –Ω–æ—Ä–º–µ")).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /–ö—É–ø–∏—Ç—å/i })).toBeInTheDocument();
  });

  test("üß™ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ metadata-proxy (–≤–∫–ª—é—á–∞—è JSON.parse)", async () => {
    axios.get.mockImplementationOnce((url) => {
      if (url.includes("/metadata-proxy/")) {
        return Promise.resolve({
          data: JSON.stringify({
            itemType: "Boots",
            rarity: 2,
            image: "https://example.com/nft.png",
            bonus: { attribute: "flatPowerBonus", value: 5 },
          }),
        });
      }
      if (url.includes("/nft")) {
        return Promise.resolve({ data: [] });
      }
      return Promise.reject(new Error("unexpected axios.get call"));
    });

    render(<MarketplacePage onBack={jest.fn()} />);
    const nftImage = await screen.findByAltText("NFT 1");
    expect(nftImage).toBeInTheDocument();
  });

  test("üß™ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –±–æ–Ω—É—Å-–∞—Ç—Ä–∏–±—É—Ç—ã –∏ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–∑ mapBonusAttribute –∏ rarityMap", async () => {
    const allCases = [
      ["flatPowerBonus", "—Å–∏–ª–∞ –∫–ª–∏–∫–∞"],
      ["dropChanceBonus", "—à–∞–Ω—Å –¥—Ä–æ–ø–∞"],
      ["vestLuckBoost", "—É–¥–∞—á–∞"],
      ["gemMultiplier", "–º–Ω–æ–∂–∏—Ç–µ–ª—å GEM"],
      ["rarityModBonus", "—à–∞–Ω—Å —Ä–µ–¥–∫–æ—Å—Ç–∏"],
      ["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_–±–æ–Ω—É—Å", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_–±–æ–Ω—É—Å"],
    ];

    for (let i = 0; i < allCases.length; i++) {
      const [attribute, expectedText] = allCases[i];
      const tokenId = i + 1;

      axios.get.mockReset();
      axios.get.mockImplementation((url) => {
        if (url.includes("/metadata-proxy")) {
          return Promise.resolve({
            data: {
              itemType: "Boots",
              rarity: 2,
              image: `https://example.com/nft-${tokenId}.png`,
              bonus: { attribute, value: 7 },
            },
          });
        }
        if (url.includes("/nft")) {
          return Promise.resolve({ data: [] });
        }
        return Promise.reject(new Error("unexpected axios.get call"));
      });

      axios.post.mockResolvedValue({
        data: {
          recommended_price: 30,
          price_status: "–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è",
          deviation_percent: 5,
        },
      });

      Web3Context.useWeb3.mockReturnValue({
        account: "0xdeadbeef",
        backendUrl: "http://localhost:3001",
        marketplaceContract: {
          getListing: jest.fn().mockResolvedValue({ priceInGems: 25 }),
          listItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
          delistItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
          buyItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
          target: "0xmarketplace",
        },
        nftContract: {
          totalSupply: jest.fn().mockResolvedValue(tokenId),
          tokenURI: jest.fn().mockResolvedValue(`https://mock-uri-${tokenId}`),
          ownerOf: jest.fn().mockResolvedValue("0x1234567890abcdef1234567890abcdef12345678"),
          getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
          approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
        },
        gemContract: {
          balanceOf: jest.fn().mockResolvedValue(100),
          allowance: jest.fn().mockResolvedValue(100),
          approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
        },
      });

      render(<MarketplacePage onBack={jest.fn()} />);
      const nftImage = await screen.findByAltText(`NFT ${tokenId}`);
      const card = nftImage.closest(".marketplace-card");
      const bonusText = Array.from(card.querySelectorAll("p")).find((p) =>
        p.textContent.includes("–ë–æ–Ω—É—Å:")
      ).textContent;

      expect(bonusText).toContain(expectedText);
      expect(bonusText).toContain("+7");
    }
  });

test("üß™ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ JSON.parse –∏–∑ metadata-proxy", async () => {
  Web3Context.useWeb3.mockReturnValue({
    account: "0xdeadbeef",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      getListing: jest.fn().mockResolvedValue({ priceInGems: 25 }),
      listItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
      delistItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
      buyItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
      target: "0xmarketplace",
    },
    nftContract: {
      totalSupply: jest.fn().mockResolvedValue(1),
      tokenURI: jest.fn().mockResolvedValue("https://mock-uri"),
      ownerOf: jest.fn().mockResolvedValue("0x1234567890abcdef1234567890abcdef12345678"),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    gemContract: {
      balanceOf: jest.fn().mockResolvedValue(100),
      allowance: jest.fn().mockResolvedValue(100),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
  });

  axios.get.mockImplementation((url) => {
    if (url.includes("/metadata-proxy")) {
      return Promise.resolve({ data: "{invalid json" }); // üí• —Å–ª–æ–º–∞–µ—Ç JSON.parse
    }
    if (url.includes("/nft")) {
      return Promise.resolve({ data: [] });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  render(<MarketplacePage onBack={jest.fn()} />);
  await new Promise((r) => setTimeout(r, 200)); // —á—É—Ç—å –ø–æ–¥–æ–∂–¥–∞—Ç—å, –∏–Ω–∞—á–µ –ø—Ä–æ–≥–ª–æ—Ç–∏—Ç

  // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫
  const message = screen.getByText("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö NFT.");
  expect(message).toBeInTheDocument();
});

test("üß™ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ fetchListings", async () => {
  Web3Context.useWeb3.mockReturnValue({
    account: "0xdeadbeef",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      getListing: jest.fn(),
      listItem: jest.fn(),
      delistItem: jest.fn(),
      buyItem: jest.fn(),
      target: "0xmarketplace",
    },
    nftContract: {
      totalSupply: jest.fn().mockRejectedValue(new Error("–û—à–∏–±–∫–∞ totalSupply")),
      tokenURI: jest.fn(),
      ownerOf: jest.fn(),
      getApproved: jest.fn(),
      approve: jest.fn(),
    },
    gemContract: {
      balanceOf: jest.fn(),
      allowance: jest.fn(),
      approve: jest.fn(),
    },
  });

  render(<MarketplacePage onBack={jest.fn()} />);
  await new Promise((r) => setTimeout(r, 200));

  expect(screen.getByText("–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö NFT.")).toBeInTheDocument();
});

test("üß™ fetchUserNFTs –Ω–µ –¥–µ–ª–∞–µ—Ç –Ω–∏—á–µ–≥–æ –±–µ–∑ account –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç NFT –ø–æ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Ü–µ–Ω—ã", async () => {
  const { useWeb3 } = require("../../contexts/Web3Provider");

  // üß™ –ë–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
  useWeb3.mockReturnValueOnce({
    account: null,
    backendUrl: "http://localhost:3001",
    marketplaceContract: {},
    nftContract: {},
    gemContract: {},
  });

  render(<MarketplacePage onBack={jest.fn()} />);
  // –ù–∏–∫–∞–∫–∏—Ö NFT –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ –¥–æ–ª–∂–Ω–æ
  expect(screen.queryByAltText("NFT 1")).not.toBeInTheDocument();

  // üß™ C –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ 2 –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (–æ–¥–∏–Ω —Å –æ—à–∏–±–∫–æ–π, –¥—Ä—É–≥–æ–π –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É)
  const tokenId = 1;
  useWeb3.mockReturnValue({
    account: "0xUser",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      getListing: jest.fn().mockResolvedValue({ priceInGems: 0 }),
    },
    nftContract: {
      ownerOf: jest.fn().mockImplementation((id) => {
        if (id === 1) return Promise.resolve("0xUser");
        if (id === 2) return Promise.reject(new Error("–û—à–∏–±–∫–∞"));
      }),
      totalSupply: jest.fn().mockResolvedValue(2),
      tokenURI: jest.fn().mockImplementation((id) =>
        Promise.resolve(`https://mock-uri-${id}`)
      ),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    gemContract: {
      balanceOf: jest.fn().mockResolvedValue(100),
      allowance: jest.fn().mockResolvedValue(100),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
  });

  axios.get.mockImplementation((url) => {
    if (url.includes("/metadata-proxy/")) {
      const id = url.split("/").pop();
      return Promise.resolve({
        data: {
          itemType: "Boots",
          rarity: 1,
          image: `https://img/nft-${id}.png`,
          bonus: { attribute: "flatPowerBonus", value: 5 },
        },
      });
    }
    if (url.includes("/nft")) {
      return Promise.resolve({
        data: [
          { tokenId: 1 },
          { tokenId: 2 }, // —ç—Ç–æ—Ç –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ ownerOf
        ],
      });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  render(<MarketplacePage onBack={jest.fn()} />);
  // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ—Ç—Ä–∏—Å—É—é—Ç—Å—è –æ–±–∞ NFT ‚Äî –æ–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –¥—Ä—É–≥–æ–π –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
  const nft1 = await screen.findByAltText("NFT 1");
  expect(nft1).toBeInTheDocument();

  const nft2 = await screen.findByAltText("NFT 2");
  expect(nft2).toBeInTheDocument();
});

test("üß™ fetchUserNFTs –¥–æ–±–∞–≤–ª—è–µ—Ç NFT, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (price = 0)", async () => {
  const { useWeb3 } = require("../../contexts/Web3Provider");

  useWeb3.mockReturnValue({
    account: "0xUser",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      getListing: jest.fn().mockResolvedValue({ priceInGems: 0 }),
    },
    nftContract: {
      ownerOf: jest.fn().mockResolvedValue("0xUser"),
      totalSupply: jest.fn().mockResolvedValue(1),
      tokenURI: jest.fn().mockResolvedValue("https://mock-uri-1"),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    gemContract: {
      balanceOf: jest.fn().mockResolvedValue(100),
      allowance: jest.fn().mockResolvedValue(100),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
  });

  axios.get.mockImplementation((url) => {
    if (url.includes("/metadata-proxy/")) {
      return Promise.resolve({
        data: {
          itemType: "Boots",
          rarity: 1,
          image: `https://img/nft-1.png`,
          bonus: { attribute: "flatPowerBonus", value: 5 },
        },
      });
    }
    if (url.includes("/nft")) {
      return Promise.resolve({ data: [{ tokenId: 1 }] });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  render(<MarketplacePage onBack={jest.fn()} />);
  const nftImage = await screen.findByAltText("NFT 1");
  expect(nftImage).toBeInTheDocument();
});


test("üß™ handleList –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è NFT", async () => {
  const promptSpy = jest.spyOn(window, "prompt").mockReturnValue("42");
  const alertSpy = jest.spyOn(window, "alert").mockImplementation(() => {});
  const waitMock = jest.fn();

  Web3Context.useWeb3.mockReturnValue({
    account: "0xUser",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      getListing: jest.fn().mockResolvedValue({ priceInGems: 0 }), // –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
      listItem: jest.fn().mockResolvedValue({ wait: waitMock }),
      delistItem: jest.fn(),
      buyItem: jest.fn(),
      target: "0xmarketplace",
    },
    nftContract: {
      ownerOf: jest.fn().mockResolvedValue("0xUser"),
      totalSupply: jest.fn().mockResolvedValue(1),
      tokenURI: jest.fn().mockResolvedValue("https://mock-uri"),
      getApproved: jest.fn().mockResolvedValue("0x0000000000000000000000000000000000000000"),
      approve: jest.fn().mockResolvedValue({ wait: waitMock }),
    },
    gemContract: {
      balanceOf: jest.fn(),
      allowance: jest.fn(),
      approve: jest.fn(),
    },
  });

  // üí° –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1 NFT, –Ω–µ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ
  axios.get.mockImplementation((url) => {
    if (url.includes("/nft")) {
      return Promise.resolve({ data: [{ tokenId: 1 }] });
    }
    if (url.includes("/metadata-proxy")) {
      return Promise.resolve({
        data: {
          itemType: "Boots",
          rarity: 2,
          image: "https://example.com/nft.png",
          bonus: { attribute: "flatPowerBonus", value: 5 },
        },
      });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  render(<MarketplacePage onBack={jest.fn()} />);

  // ‚úÖ –î–æ–∂–∏–¥–∞–µ–º—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–ú–æ–∏ NFT¬ª
  const nftImage = await screen.findByAltText("NFT 1");

  // –ö–ª–∏–∫–∞–µ–º ¬´–í—ã—Å—Ç–∞–≤–∏—Ç—å¬ª
  const listButton = screen.getByRole("button", { name: /–í—ã—Å—Ç–∞–≤–∏—Ç—å/i });
  await act(async () => {
    listButton.click();
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  expect(Web3Context.useWeb3().nftContract.approve).toHaveBeenCalled();
  expect(Web3Context.useWeb3().marketplaceContract.listItem).toHaveBeenCalledWith(1, 42);
  expect(alertSpy).toHaveBeenCalledWith("‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!");

  promptSpy.mockRestore();
  alertSpy.mockRestore();
});

test("üß™ handleList ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–≤–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã", async () => {
  // –ú–æ–∫–∞–µ–º prompt —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
  const promptSpy = jest.spyOn(window, "prompt").mockReturnValue("-10");
  // –ú–æ–∫–∞–µ–º alert, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –≤—ã–∑–æ–≤—ã
  const alertSpy = jest.spyOn(window, "alert").mockImplementation(() => {});

  // –ú–æ–∫–∞–µ–º useWeb3 —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º
  Web3Context.useWeb3.mockReturnValue({
    account: "0xdeadbeef",
    backendUrl: "http://localhost:3001",
    nftContract: {
      tokenURI: jest.fn().mockResolvedValue("https://example.com/metadata.json"),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    marketplaceContract: {
      target: "0xmarketplace",
      listItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    gemContract: {},
  });

  // –ú–æ–∫–∞–µ–º axios.get –¥–ª—è metadata-proxy –∏ nft —Å–ø–∏—Å–∫–∞
  axios.get.mockImplementation((url) => {
    if (url.includes("/metadata-proxy")) {
      return Promise.resolve({
        data: {
          itemType: "Boots",
          rarity: 2,
          image: "https://example.com/nft.png",
          bonus: { attribute: "flatPowerBonus", value: 5 },
        },
      });
    }
    if (url.includes("/nft")) {
      return Promise.resolve({
        data: [{ tokenId: 1 }],
      });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  // –ú–æ–∫–∞–µ–º axios.post –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ü–µ–Ω—ã
  axios.post.mockResolvedValue({ data: { recommended_price: 30 } });

  // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  const { container } = render(<MarketplacePage onBack={() => {}} />);

  // –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É "–í—ã—Å—Ç–∞–≤–∏—Ç—å" ‚Äî –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –∏–∑ myNFTs —Å —Ç–æ–∫–µ–Ω–æ–º 1
  const button = await screen.findByRole("button", { name: /–í—ã—Å—Ç–∞–≤–∏—Ç—å/i });

  // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤ act, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  await act(async () => {
    button.click();
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ alert —Å –æ—à–∏–±–∫–æ–π —Ü–µ–Ω—ã –±—ã–ª –≤—ã–∑–≤–∞–Ω
  expect(alertSpy).toHaveBeenCalledWith("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞");

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  promptSpy.mockRestore();
  alertSpy.mockRestore();
});


test("üß™ handleList ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ –±–ª–æ–∫–µ catch —á–µ—Ä–µ–∑ UI", async () => {
  const alertSpy = jest.spyOn(window, "alert").mockImplementation(() => {});
  const promptSpy = jest.spyOn(window, "prompt").mockReturnValue("10");

  Web3Context.useWeb3.mockReturnValue({
    account: "0xdeadbeef",
    backendUrl: "http://localhost:3001",
    nftContract: {
      tokenURI: jest.fn().mockRejectedValue(new Error("–û—à–∏–±–∫–∞")),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    marketplaceContract: {
      target: "0xmarketplace",
      listItem: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
  });

  const { container } = render(<MarketplacePage onBack={() => {}} />);

  // –í—Ä—É—á–Ω—É—é –≤—Å—Ç–∞–≤–ª—è–µ–º NFT –≤ myNFTs –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í—ã—Å—Ç–∞–≤–∏—Ç—å"
  const grid = container.querySelector(".marketplace-grid");
  const card = document.createElement("div");
  card.className = "marketplace-card";
  card.innerHTML = `
    <img alt="NFT 1" src="https://example.com/nft.png" />
    <button>–í—ã—Å—Ç–∞–≤–∏—Ç—å</button>
  `;
  grid?.appendChild(card);

  const button = await screen.findByRole("button", { name: /–í—ã—Å—Ç–∞–≤–∏—Ç—å/i });

  await act(async () => {
    button.click();
  });

  expect(alertSpy).toHaveBeenCalledWith("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ NFT. –°–º. –∫–æ–Ω—Å–æ–ª—å.");

  promptSpy.mockRestore();
  alertSpy.mockRestore();
});

test("üß™ handleDelist ‚Äî —Å–Ω–∏–º–∞–µ—Ç NFT —Å –ø—Ä–æ–¥–∞–∂–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É", async () => {
  const alertSpy = jest.spyOn(window, "alert").mockImplementation(() => {});
  const waitMock = jest.fn().mockResolvedValue();

  Web3Context.useWeb3.mockReturnValue({
    account: "0xdeadbeef",
    backendUrl: "http://localhost:3001",
    marketplaceContract: {
      delistItem: jest.fn().mockResolvedValue({ wait: waitMock }),
      getListing: jest.fn().mockResolvedValue({ priceInGems: 25 }),
      listItem: jest.fn(),
      buyItem: jest.fn(),
      target: "0xmarketplace",
    },
    nftContract: {
      totalSupply: jest.fn().mockResolvedValue(1),
      tokenURI: jest.fn().mockResolvedValue("https://mock-uri"),
      ownerOf: jest.fn().mockResolvedValue("0xdeadbeef"),
      getApproved: jest.fn().mockResolvedValue("0xmarketplace"),
      approve: jest.fn().mockResolvedValue({ wait: jest.fn() }),
    },
    gemContract: {
      balanceOf: jest.fn(),
      allowance: jest.fn(),
      approve: jest.fn(),
    },
  });

  axios.get.mockImplementation((url) => {
    if (url.includes("/metadata-proxy/")) {
      return Promise.resolve({
        data: {
          itemType: "Boots",
          rarity: 2,
          image: "https://example.com/nft.png",
          bonus: { attribute: "flatPowerBonus", value: 5 },
        },
      });
    }
    if (url.includes("/nft")) {
      return Promise.resolve({ data: [{ tokenId: 1 }] });
    }
    return Promise.reject(new Error("unexpected axios.get call"));
  });

  render(<MarketplacePage onBack={() => {}} />);

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
  const delistButton = await screen.findByRole("button", { name: /–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂/i });

  await act(async () => {
    delistButton.click();
  });

  expect(Web3Context.useWeb3().marketplaceContract.delistItem).toHaveBeenCalledWith(1);
  expect(waitMock).toHaveBeenCalled();
  expect(alertSpy).toHaveBeenCalledWith("‚úÖ NFT —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏!");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏
  Web3Context.useWeb3.mockReturnValueOnce({
    marketplaceContract: {
      delistItem: jest.fn().mockRejectedValue(new Error("–û—à–∏–±–∫–∞")),
    },
  });

  try {
    await act(async () => {
      await Web3Context.useWeb3().marketplaceContract.delistItem(1);
    });
  } catch {}

  alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∏. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
  expect(alertSpy).toHaveBeenCalledWith("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ø—Ä–æ–¥–∞–∂–∏. –°–º. –∫–æ–Ω—Å–æ–ª—å.");

  alertSpy.mockRestore();
});




});
